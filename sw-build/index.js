const { readFile, writeFile } = require('fs');
const { promisify } = require('util');

const workboxBuild = require('workbox-build');

const asyncReadFile = promisify(readFile);
const asyncWriteFile = promisify(writeFile);

const templateReplace = (input, templateName, replacementString) =>
  input.replace(new RegExp(`["']{{${templateName}}}["']`), replacementString);

const build = async () => {
  // async tasks
  // get files to preload
  const precacheListP = workboxBuild
    .getManifest({
      globDirectory: 'build',
      globPatterns: ['**/*.{js,css,html}'],
      globIgnores: [
        'sw.js', // destination service worker
        'service-worker.js', // service worker generated by CRA
        'precache-manifest.*.js', // manifest created by CRA
        'runtime-main.*.js', // webpack runtime (already injected in index.html)
      ],
    })
    .then(({ warnings, manifestEntries }) => {
      warnings.forEach(console.warn);
      return manifestEntries;
    });
  // get name of files already injected in the index
  const injectedListP = asyncReadFile('./build/index.html', {
    encoding: 'utf8',
  }).then(content => {
    const re = /data-original-file="(?<href>[^"]+)"/gm;
    const output = [];
    let result;
    while ((result = re.exec(content)) !== null) {
      output.push(result.groups.href);
    }
    return output;
  });
  // get template service worker
  const templateP = asyncReadFile('./sw-build/template.js', {
    encoding: 'utf8',
  });

  // await for all the previous async tasks (which are just promises for now)
  let [precacheList, injectedList, template] = await Promise.all([
    precacheListP,
    injectedListP,
    templateP,
  ]);

  // filter the files injected out of the list of files to preload
  precacheList = precacheList.filter(
    ({ url }) => !injectedList.some(injected => injected.endsWith(url)),
  );

  // process and modify template
  template =
    '/* This file is auto-generated, please do not edit it manually */\n\n' +
    template;
  // replace placeholders
  template = templateReplace(
    template,
    'imports',
    `importScripts('${workboxBuild.getModuleURL('workbox-sw')}')`,
  );
  template = templateReplace(
    template,
    'precache',
    JSON.stringify(precacheList, null, 2),
  );

  // write to output file
  await asyncWriteFile('./build/sw.js', template, { encoding: 'utf8' });

  // return a message of what we just did
  return '⚡ Generated a full service worker ⚡';
};

build().then(console.log, console.error);
